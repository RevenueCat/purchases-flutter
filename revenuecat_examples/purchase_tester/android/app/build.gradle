def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    lint {
        disable 'InvalidPackage'
    }

    namespace 'com.revenuecat.purchases_sample'

    defaultConfig {
        applicationId "com.revenuecat.purchases_sample"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // purchases-hybrid-common has two variants, but this library doesn't have any
        // Gradle doesn't know which variant of purchases-hybrid-common to use when using
        // includeBuild and working with a local copy of purchases-hybrid-common
        // This line also needs to be added to purchases_flutter's build.gradle
        // https://developer.android.com/studio/build/build-variants#resolve_matching_errors
        missingDimensionStrategy 'dependencyVersions', 'latestDependencies', 'unityIAP'
        multiDexEnabled true
    }

    buildTypes {
        release {
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'com.android.support:multidex:1.0.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    // Versions should match Flutter's integration_test package or there will be dependency resolution conflicts
    // https://github.com/flutter/flutter/blob/master/packages/integration_test/android/build.gradle#L52-L55
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
}

// Call passing parameter -PcommonPath="$HOME/Development/repos/purchases-hybrid-common/android"
task enableLocalBuild {
    group = 'Tools'
    description = 'Enable composite build'
    doLast {
        new File(".composite-enable").text = commonPath
    }
}

task disableLocalBuild {
    group = 'Tools'
    description = 'Disable composite build'
    doLast {
        File file = file(".composite-enable")
        if (file.exists()) {
            file.delete()
        }
    }
}
