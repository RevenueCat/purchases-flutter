# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'yaml'
require 'os'
require 'fileutils'

files_with_version_number = {
    './.version' => ['{x}'],
    './pubspec.yaml' => ['version: {x}'],
    './ios/purchases_flutter.podspec' => ['s.version          = \'{x}\''],
    './macos/purchases_flutter.podspec' => ['s.version          = \'{x}\''],
    './ios/Classes/PurchasesFlutterPlugin.m' => ['return @"{x}"'],
    './android/build.gradle' => ['version \'{x}\''],
    './android/src/main/java/com/revenuecat/purchases_flutter/PurchasesFlutterPlugin.java' => ['PLUGIN_VERSION = "{x}"'],
}

repo_name = 'purchases-flutter'
changelog_latest_path = './CHANGELOG-LATEST.md'
changelog_path = './CHANGELOG.md'
versions_path = './VERSIONS.md'

before_all do
  setup_circle_ci
  update_fastlane
end

desc "Bump version, edit changelog, and create pull request"
lane :bump do |options|
  phc_version = get_phc_version
  bump_version_update_changelog_create_pr(
    current_version: current_version_number,
    changelog_latest_path: changelog_latest_path,
    changelog_path: changelog_path,
    files_to_update: files_with_version_number,
    files_to_update_without_prerelease_modifiers: {},
    repo_name: repo_name,
    github_rate_limit: options[:github_rate_limit],
    editor: options[:editor],
    next_version: options[:next_version],
    automatic_release: options[:automatic_release],
    hybrid_common_version: phc_version,
    versions_file_path: versions_path,
    is_prerelease: options[:is_prerelease]
  )
  update_hybrids_versions_file(
    versions_file_path: versions_path,
    new_sdk_version: current_version_number,
    hybrid_common_version: phc_version
  )
  commit_current_changes(commit_message: 'Update VERSIONS.md')
  push_to_git_remote(set_upstream: true)
end

desc "Automatically bumps version, edit changelog, and create pull request"
lane :automatic_bump do |options|
  next_version, type_of_bump = determine_next_version_using_labels(
    repo_name: repo_name,
    github_rate_limit: options[:github_rate_limit]
  )
  options[:next_version] = next_version
  options[:automatic_release] = true
  if type_of_bump == :skip
    UI.message('Skipping automatic bump since the next version doesn\'t include public facing changes')
    next
  end
  if type_of_bump == :major
    UI.message('Skipping automatic bump since the next version is a major release')
    next
  end
  bump(options)
end

desc "Create release"
lane :release do |options|
  Dir.chdir('..') do
    sh('flutter', 'pub', 'publish', '--dry-run')
  end
    github_release(version: current_version_number)
    setup_credentials_file
  Dir.chdir('..') do
    sh('flutter', 'pub', 'publish', '--force')
  end
end

desc "Make github release"
lane :github_release do |options|
  create_github_release(
    version: options[:version],
    repo_name: repo_name,
    github_api_token: ENV["GITHUB_TOKEN"],
    changelog_latest_path: changelog_latest_path,
    upload_assets: []
  )
end

desc "Creates PR changing version to next minor adding a -SNAPSHOT suffix"
lane :prepare_next_version do |options|
  create_next_snapshot_version(
    current_version: current_version_number,
    repo_name: repo_name,
    github_pr_token: ENV["GITHUB_PULL_REQUEST_API_TOKEN"],
    files_to_update: files_with_version_number,
    files_to_update_without_prerelease_modifiers: {}
  )
end

desc "Builds and analyzes the api_tester project to make sure APIs are expected"
lane :run_api_tests do |options|
  check_api_tester_imports_up_to_date
  build_api_tester_apk
  analyze_api_tester
end

desc "Tag current branch with current version number"
lane :tag_current_branch do |options|
  version_number = current_version_number
  check_no_git_tag_exists(version_number)

  add_git_tag(tag: version_number)
  push_git_tags(tag: version_number)
end

desc "Update hybrid common pod and gradle"
lane :update_hybrid_common do |options|
  if options[:dry_run]
    dry_run = true
  end
  if options[:version]
    new_version_number = options[:version]
  else
    UI.user_error!("Missing `version` argument")
  end

  current_phc_version = get_phc_version

  UI.message("‚ÑπÔ∏è  Current Purchases Hybrid Common version: #{current_phc_version}")
  UI.message("‚ÑπÔ∏è  Setting Purchases Hybrid Common version: #{new_version_number}")
  files_to_update = {
      'ios/purchases_flutter.podspec' => ['s.dependency \'PurchasesHybridCommon\', \'{x}\''],
      'macos/purchases_flutter.podspec' => ['s.dependency \'PurchasesHybridCommon\', \'{x}\''],
      'android/build.gradle' => ['ext.common_version = \'{x}\''],
  }

  if dry_run
    UI.message('‚ÑπÔ∏è  Nothing more to do, dry_run: true')
    next
  end

  bump_phc_version(
    repo_name: 'purchases-flutter',
    files_to_update: files_to_update,
    current_version: current_phc_version,
    next_version: new_version_number,
    open_pr: options[:open_pr] || false,
    automatic_release: options[:automatic_release] || false
  )
end

###############################################################################
# Helper functions ü§úü§õ                                                      #
###############################################################################

def get_root_folder
  return File.expand_path('../../', __FILE__)
end

def setup_credentials_file
  access_token = ENV['FLUTTER_PUB_ACCESS_TOKEN'] || UI.user_error!('Need to set FLUTTER_PUB_ACCESS_TOKEN to publish package.')
  refresh_token = ENV['FLUTTER_PUB_REFRESH_TOKEN'] || UI.user_error!('Need to set FLUTTER_PUB_REFRESH_TOKEN to publish package.')
  id_token = ENV['FLUTTER_PUB_ID_TOKEN'] || UI.user_error!('Need to set FLUTTER_PUB_ID_TOKEN to publish package.')
  expiration = ENV['FLUTTER_PUB_EXPIRATION_TIMESTAMP'] || UI.user_error!('Need to set FLUTTER_PUB_EXPIRATION_TIMESTAMP to publish package.')
  token_endpoint = 'https://accounts.google.com/o/oauth2/token'
  scopes = ['openid', 'https://www.googleapis.com/auth/userinfo.email']

  credentials_hash = {
    "accessToken": access_token,
    "refreshToken": refresh_token,
    "idToken": id_token,
    "tokenEndpoint": token_endpoint,
    "scopes": scopes,
    "expiration": expiration.to_i
  }
  home_folder = ENV['HOME']
  output_relative_path = OS.mac? ? "Library/Application\ Support/dart/pub-credentials.json" : ".config/dart/pub-credentials.json"
  output_path = File.join(home_folder, output_relative_path)

  if File.exist?(output_path)
    UI.message('Credentials file already exists. Skipping setup')
    return
  end

  UI.message('Creating credentials file')
  output_directory = File.dirname(output_path)
  FileUtils.mkpath(output_directory)
  File.write(output_path, credentials_hash.to_json)
end

def current_version_number
  File.read("../.version").strip
end

def check_api_tester_imports_up_to_date
  api_test_files = Dir
    .glob("../api_tester/lib/api_tests/**/*.dart")
    .reject { |file_path| File.directory?(file_path) }
  import_file_lines = File.readlines("../api_tester/lib/api_tests_import.dart")
  api_test_files.each do |file_path|
    file_name = File.basename(file_path)
    unless import_file_lines.any? { |line| line.include?(file_name) }
      UI.user_error!("api_tester api_tests_import.dart is not up-to-date. Missing #{file_name}")
    end
  end
end

def build_api_tester_apk
  Dir.chdir("../api_tester") do
    sh("flutter", "build", "apk", "--debug")
  end
end

def analyze_api_tester
  Dir.chdir("../api_tester") do
    sh("flutter", "analyze")
  end
end

def get_phc_version
  android_build_gradle_path = '../android/build.gradle'
  android_build_gradle_contents = File.read(android_build_gradle_path)
  android_phc_version = android_build_gradle_contents.match("ext.common_version = '(.*)'").captures[0]
  UI.user_error!("Android PHC version not found.") if android_phc_version.nil?

  ios_podspec_path = '../ios/purchases_flutter.podspec'
  ios_podspec_contents = File.read(ios_podspec_path)
  ios_phc_version = ios_podspec_contents.match("s.dependency 'PurchasesHybridCommon', '(.*)'").captures[0]
  UI.user_error!("iOS PHC version not found.") if ios_phc_version.nil?

  UI.user_error!("Android and iOS PHC versions don't match. Please make sure they match.") if android_phc_version != ios_phc_version

  ios_phc_version
end

def check_no_git_tag_exists(version_number)
  if git_tag_exists(tag: version_number, remote: true, remote_name: 'origin')
    raise "git tag with version #{version_number} already exists!"
  end
end
