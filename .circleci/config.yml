version: 2.1

aliases:
  release-tags: &release-tags
    filters:
      tags:
        ignore: /^.*-SNAPSHOT/
      branches:
        ignore: /.*/
  release-branches: &release-branches
    filters:
      tags:
        ignore: /.*/
      branches:
        only: /^release\/.*/
  only-main-branch: &only-main-branch
    filters:
      tags:
        ignore: /.*/
      branches:
        only: main

orbs:
  android: circleci/android@0.2.1
  gcp-cli: circleci/gcp-cli@2.1.0
  swissknife: roopakv/swissknife@0.65.0
  revenuecat: revenuecat/sdks-common-config@2.1.0
  macos: circleci/macos@2.3.2

parameters:
  action:
    type: enum
    enum: [build, upgrade-hybrid-common, bump]
    default: build
  version:
    type: string
    default: ''
  automatic:
    type: boolean
    default: false

commands:

  replace-api-key:
    description: "replace API_KEY"
    steps:
      - run: sed -i.bck s/api_key/$API_KEY/ revenuecat_examples/purchase_tester/integration_test/app_test.dart

  flutter-get-dependencies:
    description: "Install dependencies"
    parameters:
      project:
        default: .
        type: string
    steps:
      - run:
          name: Install Flutter Dependencies
          command: |
            cd <<parameters.project>>
            flutter pub get
  build-flutter-project:
    description: "Install dependencies and build"
    parameters:
      project:
        default: .
        type: string
    steps:
      - flutter-get-dependencies:
          project: <<parameters.project>>
      - run:
          name: Build
          command: |
            cd <<parameters.project>>
            flutter packages pub run build_runner build --delete-conflicting-outputs

  gradle-dependencies:
    description: "Get Gradle dependencies"
    steps:
      - run:
          working_directory: ./android
          name: Chmod permissions
          command: sudo chmod +x ./gradlew
      - restore_cache:
          name: Restore Gradle cache
          key: v1-gradle-{{ checksum "./android/build.gradle" }}-{{ checksum  "./android/app/build.gradle" }}-{{ arch }}
      - run:
          working_directory: ./android
          name: Download Gradle dependencies
          command: ./gradlew dependencies
      - save_cache:
          name: Save Gradle cache
          paths:
            - ~/.gradle
          key: v1-gradle-{{ checksum "./android/build.gradle" }}-{{ checksum  "./android/app/build.gradle" }}-{{ arch }}

  setup-flutter:
    description: "setup Flutter"
    parameters:
      version:
        type: string
        default: stable
    steps:
      - run:
          name: Download flutter SDK
          command: git clone --depth 1 --branch << parameters.version >> https://github.com/flutter/flutter.git flutter
      - run:
          name: Setup environment variables
          command: echo 'export PATH="$PATH:`pwd`/flutter/bin"'  >> $BASH_ENV
      - run:
          name: Flutter doctor
          command: flutter doctor

  install-and-create-sim:
    parameters:
      install-simulator-name:
        type: string
      sim-device-type:
        type: string
      sim-device-runtime:
        type: string
      sim-name:
        type: string
    steps:
      - run:
          name: Install xcode-install
          command: gem install xcode-install
      - run:
          name: Install simulator
          command: | # Print all available simulators and install required one
              xcversion simulators
              xcversion simulators --install="<< parameters.install-simulator-name >>"
      - run:
          name: Create simulator
          command: xcrun simctl create '<< parameters.sim-name >>' com.apple.CoreSimulator.SimDeviceType.<< parameters.sim-device-type >> com.apple.CoreSimulator.SimRuntime.<< parameters.sim-device-runtime >>

  install-sdkman:
    description: Install SDKMAN
    steps:
      - run:
          name: Installing SDKMAN
          command: |
            if curl -s "https://get.sdkman.io?rcupdate=false" | bash; then
              echo -e '\nsource "/root/.sdkman/bin/sdkman-init.sh"' >> $BASH_ENV
              source $BASH_ENV
            else
              echo "Error installing SDKMAN, continuing with default Java" >&2
            fi
      - run:
          name: Setup Java environment
          command: |
            if ! sdk env install; then
              echo "Error installing Java SDK through SDKMAN, continuing with default Java" >&2
            fi
  
  install-correct-cocoapods:
    description: Install correct cocoapods version
    steps:
      - run:
          name: Install Cocoapods
          command: |
            # This is needed because Flutter doesn't use 'bundle exec'

            # Uninstalling preinstalled CircleCI cocoapods
            gem uninstall -aIx cocoapods

            # Need >= 1.14.0 to prevent ActiveSupport crash
            gem install cocoapods -v '>= 1.14.0'

jobs:
  lint:
    description: "Run static analysis for Flutter"
    docker:
      - image: ghcr.io/cirruslabs/flutter:stable
    steps:
      - checkout
      - build-flutter-project
      - flutter-get-dependencies:
          project: revenuecat_examples/MagicWeather
      - flutter-get-dependencies:
          project: revenuecat_examples/purchase_tester
      - flutter-get-dependencies:
          project: api_tester
      - flutter-get-dependencies:
          project: purchases_ui_flutter
      - run:
          name: Analyze code
          command: flutter analyze lib
      - run:
          name: Analyze code for purchases_ui_flutter
          command: cd purchases_ui_flutter && flutter analyze lib

  test:
    description: "Run tests for Flutter"
    docker:
      - image: ghcr.io/cirruslabs/flutter:stable
    steps:
      - checkout
      - build-flutter-project
      - run:
          name: Run tests
          command: flutter test
      - run:
          name: Run tests for purchases_ui_flutter
          command: cd purchases_ui_flutter && flutter test

  api_test:
    description: "Run API tests for Flutter"
    docker:
      - image: ghcr.io/cirruslabs/flutter:stable
    resource_class: xlarge
    steps:
      - checkout
      - install-sdkman
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - flutter-get-dependencies:
          project: api_tester
      - run:
          name: Run API tests
          command: bundle exec fastlane run_api_tests

  android-integration-test-build:
    description: "Build Android Flutter integration tests"
    docker:
      - image: ghcr.io/cirruslabs/flutter:stable
    resource_class: large
    steps:
      - checkout
      - replace-api-key
      - install-sdkman
      - run:
          working_directory: revenuecat_examples/purchase_tester/android
          command: |
            # flutter build generates files in android/ for building the app
            flutter build apk
            ./gradlew app:assembleAndroidTest
            ./gradlew app:assembleDebug -Ptarget=`pwd`/../integration_test/app_test.dart
      - persist_to_workspace:
          root: .
          paths:
            - revenuecat_examples/purchase_tester/build/app/outputs/apk/debug/app-debug.apk
            - revenuecat_examples/purchase_tester/build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk

  run-firebase-tests:
    description: "Run integration tests for Flutter"
    executor: gcp-cli/google
    steps:
      - checkout
      - attach_workspace:
          at: .
      - gcp-cli/initialize:
          gcloud-service-key: GCLOUD_SERVICE_KEY
          google-compute-zone: GOOGLE_COMPUTE_ZONE
          google-project-id: GOOGLE_PROJECT_ID
      - run:
          name: Test with Firebase Test Lab
          command: >
            gcloud firebase test android run --type instrumentation \
              --app revenuecat_examples/purchase_tester/build/app/outputs/apk/debug/app-debug.apk \
              --test revenuecat_examples/purchase_tester/build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
              --timeout 2m \
              --results-bucket cloud-test-${GOOGLE_PROJECT_ID}
      - run:
          name: Copy test results data
          command: |
            mkdir -p ~/gsutil/
            gsutil -m cp -r -U `gsutil ls gs://cloud-test-$GOOGLE_PROJECT_ID | tail -1` ~/gsutil/ | true
      - store_artifacts:
          path: ~/gsutil/
      - store_test_results:
          path: ~/gsutil/

  ios-integration-test:
    description: "Run integration tests for Flutter"
    resource_class: macos.m1.medium.gen1
    macos:
      xcode: 15.2
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - install-correct-cocoapods
      - macos/preboot-simulator:
          device: iPhone 14
          version: '16.4'
      - setup-flutter
      - replace-api-key
      - build-flutter-project:
          project: revenuecat_examples/purchase_tester
      - run:
          name: Run Flutter integration tests
          command: |
            cd revenuecat_examples/purchase_tester
            flutter drive --target=integration_test/app_test.dart \
            --driver=test_driver/integration_test.dart

  macos-integration-test:
    description: "Run integration tests for Flutter"
    resource_class: macos.m1.medium.gen1
    macos:
      xcode: 15.2
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - install-correct-cocoapods
      - setup-flutter
      - replace-api-key
      - build-flutter-project:
          project: revenuecat_examples/purchase_tester
      - run:
          name: Run Flutter integration tests
          command: |
            cd revenuecat_examples/purchase_tester
            DEVICE_ID=$(flutter devices | awk -F 'â€¢' 'NR==2 {gsub(/^[ \t]+|[ \t]+$/, "", $1); print $2}')
            flutter drive -d $DEVICE_ID --target=integration_test/app_test.dart \
            --driver=test_driver/integration_test.dart

  freezed:
    description: "Check if Freezed files need to be added to repo"
    docker:
      - image: ghcr.io/cirruslabs/flutter:stable
    steps:
      - checkout
      - build-flutter-project
      - swissknife/fail_if_dirty:
          print-modified-files: true

  dry-run-release:
    description: "Check if Freezed files need to be added to repo"
    docker:
      - image: ghcr.io/cirruslabs/flutter:stable
    steps:
      - checkout
      - run:
          name: Dry Run Release
          command: flutter pub publish --dry-run
      - run:
          name: Dry Run Release for purchases_ui_flutter
          command: cd purchases_ui_flutter && flutter pub publish --dry-run

  update-hybrid-common-versions:
    description: "Creates a PR updating purchases-hybrid-common to latest release"
    docker:
      - image: cimg/ruby:3.1.2
    steps:
      - checkout
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - revenuecat/trust-github-key
      - revenuecat/setup-git-credentials
      - setup-flutter
      - run:
          name: Updating to next version of phc
          command: |
            bundle exec fastlane update_hybrid_common \
            version:<< pipeline.parameters.version >> \
            open_pr:true \
            automatic_release:<< pipeline.parameters.automatic >>

  make-release:
    description: "Publishes a new version of purchases-flutter to pub.dev and creates a github release"
    docker:
      - image: ghcr.io/cirruslabs/flutter:stable
    steps:
      - checkout
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - revenuecat/trust-github-key
      - run:
          name: release
          command: bundle exec fastlane release

  make-release-purchases-flutter-ui:
    description: "Publishes a new version of purchases-flutter-ui to pub.dev and creates a github release"
    docker:
      - image: ghcr.io/cirruslabs/flutter:stable
    steps:
      - checkout
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - revenuecat/trust-github-key
      - run:
          name: release
          command: bundle exec fastlane release_purchases_ui_flutter

  github_release:
    description: "Creates a github release with the current version"
    docker:
      - image: cimg/ruby:3.1.2
    steps:
      - checkout
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - revenuecat/trust-github-key
      - run:
          name: release
          command: bundle exec fastlane github_release_current_version

workflows:
  danger:
    jobs:
      - revenuecat/danger
  test:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - lint
      - test
      - api_test
      - freezed
      - dry-run-release: *release-branches
      - ios-integration-test
      - macos-integration-test
      - android-integration-test-build

  deploy:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - ios-integration-test: *release-branches
      - macos-integration-test: *release-branches
      - android-integration-test-build: *release-branches
      - run-firebase-tests:
          requires:
            - android-integration-test-build
          <<: *release-branches
      - hold:
          type: approval
          requires:
            - ios-integration-test
            - macos-integration-test
            - run-firebase-tests
          <<: *release-branches
      - revenuecat/tag-current-branch:
          requires:
            - hold
          <<: *release-branches
      - make-release: *release-tags
      - make-release-purchases-flutter-ui:
          requires:
            - make-release
          <<: *release-tags
      - github_release:
          requires:
            - make-release
            - make-release-purchases-flutter-ui
          <<: *release-tags
  weekly-run-workflow:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "release-train", << pipeline.schedule.name >> ]
    jobs:
      - revenuecat/automatic-bump
  manual-trigger-bump:
    when:
      equal: [ bump, << pipeline.parameters.action >> ]
    jobs:
      - revenuecat/automatic-bump
  update-hybrid-common-versions:
    when:
      equal: [ upgrade-hybrid-common, << pipeline.parameters.action >> ]
    jobs:
      - update-hybrid-common-versions
